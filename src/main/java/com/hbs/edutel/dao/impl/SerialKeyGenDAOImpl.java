package com.hbs.edutel.dao.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

import com.hbs.edutel.action.AdminSerialKeyGenerateAction;
import com.hbs.edutel.bo.SerialKeyParam;
import com.hbs.edutel.common.action.CommonValidator;
import com.hbs.edutel.common.dao.impl.CommonHibernateDaoSupport;
import com.hbs.edutel.common.model.interfaces.IUsers;
import com.hbs.edutel.dao.SerialKeyGenDAO;
import com.hbs.edutel.logger.CustomAuditLogger;
import com.hbs.edutel.model.SerialKeyGenerate;
import com.hbs.edutel.model.SerialKeyUserMapping;
import com.hbs.edutel.util.CommonUtil;
import com.hbs.edutel.util.JQueryDataTableParam;
import com.hbs.edutel.util.common.ConstEnumUtil.EKeyGen;
import com.hbs.edutel.util.common.ConstEnumUtil.EPage;
import com.hbs.edutel.util.common.ConstEnumUtil.EWrap;
import com.hbs.edutel.util.common.factory.UsersFactory;

public class SerialKeyGenDAOImpl extends CommonHibernateDaoSupport implements SerialKeyGenDAO
{
	private static final long		serialVersionUID	= 1L;
	private final CustomAuditLogger	caLogger			= new CustomAuditLogger(this.getClass());

	
	public boolean createAndSaveSerialKey(AdminSerialKeyGenerateAction adminSerialKey)
	{
		Transaction _Txn = null;
		Session session = null;
		try
		{
			session = getSession();
			_Txn = session.beginTransaction();
			for (int idx = 0; idx < adminSerialKey.getNumberOfKeys(); idx++)
			{
				SerialKeyGenerate serialKey = new SerialKeyGenerate();
				serialKey.generateKeyAndSetInSerialKey();
				serialKey.setSerialNo(getAutoGeneratedId(EPage.SerialNo, null));
				serialKey.setSerialBatch(adminSerialKey.getSerialBatch());
				serialKey.setSerialPromo(adminSerialKey.getSerialPromo());
				serialKey.setAmount(adminSerialKey.getSerialKeyPrice());
				serialKey.setSellingAmount(adminSerialKey.getSerialKeySellingPrice());
				serialKey.setSerialKeyStatus(EKeyGen.Not_Sold);
				serialKey.setStatus(true);
				serialKey.setCreatedBy(adminSerialKey.getUser().getUsEmployeeId());
				serialKey.setCreatedDate(CommonUtil.getTimeZoneDateInFormat(new Date(), DATE_FORMAT_YYYY_MM_DD_HH_MM_SS_24, IST));

				session.save(serialKey);

				IUsers user = UsersFactory.getInstance().getUsersInstance(adminSerialKey.getUsEmployeeId());
				SerialKeyUserMapping serialKeyMapping = new SerialKeyUserMapping(serialKey.getSerialKey(), user, serialKey);

				session.save(serialKeyMapping);
			}

			_Txn.commit();
			return true;
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, " DAOImpl : createAndSaveSerialKey", excep.getMessage(), this.getClass().getName(), adminSerialKey.getUser().getUsEmployeeId());
			if (_Txn != null && _Txn.isActive())
			{
				try
				{
					_Txn.rollback();
				}
				catch (HibernateException hibExcep)
				{
					caLogger.error(Audit_Logging_Event_DAOImpl, " DAOImpl : createAndSaveSerialKey", hibExcep.getMessage(), this.getClass().getName(), adminSerialKey.getUser().getUsEmployeeId());
				}
			}
			return false;
		}
		finally
		{
			if (session != null)
			{
				session.clear();
				session.close();
			}
		}
	}

	@SuppressWarnings("unchecked")
	
	public List<SerialKeyUserMapping> getPrintSerialKeyList(String keys, EKeyGen eKeyGen)
	{
		Session session = getSession();
		StringBuffer sbSelectQry = null;
		try
		{
			sbSelectQry = new StringBuffer();
			sbSelectQry.append("From SerialKeyUserMapping SKU " + WHERE_1_1);
			sbSelectQry.append(" AND SKU.users.usStatus = True ");
			if (CommonValidator.isNotNullNotEmpty(eKeyGen))
				sbSelectQry.append(" AND SKU.serialKeyGenerate.serialKeyStatus = " + EWrap.Quote.enclose(eKeyGen.getStatus()));

			if (CommonValidator.isNotNullNotEmpty(keys))
			{
				sbSelectQry.append(" AND SKU.serialKeyGenerate.serialKey In " + EWrap.Brace.enclose(EWrap.Quote.enclose(keys.split(",".trim()))));
			}

			sbSelectQry.append(" Order By SKU.serialKeyGenerate.createdDate asc");

			return session.createQuery(sbSelectQry.toString()).list();
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, " getPrintSerialKeyList", excep.getMessage(), this.getClass().getName(), null);
		}
		finally
		{
			session.clear();
			session.close();
		}

		return new ArrayList<SerialKeyUserMapping>(0);
	}

	@SuppressWarnings("unchecked")
	
	public List<SerialKeyGenerate> getSerialKeyList(SerialKeyParam skParam)
	{
		Session session = getSession();
		try
		{
			StringBuffer sbSelectQry = new StringBuffer();
			sbSelectQry.append(FROM + SerialKeyGenerate.class.getCanonicalName() + WHERE_1_1);
			sbSelectQry.append(" AND status = True ");
			if (CommonValidator.isNotNullNotEmpty(skParam))
			{
				if (CommonValidator.isNotNullNotEmpty(skParam.serialNo))
				{
					sbSelectQry.append(" AND serialNo In " + EWrap.Brace.enclose(EWrap.Quote.enclose(skParam.serialNo)));
				}
				if (CommonValidator.isNotNullNotEmpty(skParam.serialKey))
				{
					sbSelectQry.append(" AND serialKey In " + EWrap.Brace.enclose(EWrap.Quote.enclose(skParam.serialKey)));
				}
				if (CommonValidator.isNotNullNotEmpty(skParam.serialKeyStatus))
				{
					sbSelectQry.append(" AND serialKeyStatus = " + EWrap.Quote.enclose(skParam.serialKeyStatus));
				}
			}
			return session.createQuery(sbSelectQry.toString()).list();
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, " DAOImpl : getSerialKeyList", excep.getMessage(), this.getClass().getName(), null);
		}
		finally
		{
			session.clear();
			session.close();
		}
		return new ArrayList<SerialKeyGenerate>(0);
	}

	@SuppressWarnings("unchecked")
	
	public List<SerialKeyUserMapping> getSerialKeyUsersList(JQueryDataTableParam jdtParam)
	{
		Session session = getSession();
		try
		{
			String serialKeySelectQuery = "";
			if (CommonValidator.isNotNullNotEmpty(jdtParam))
			{
				if (CommonValidator.isNotNullNotEmpty(jdtParam.sSearchArr) && jdtParam.sSearchArr.length != 0)
				{
					if (CommonValidator.isEqual(jdtParam.sSearchArr[jdtParam.sSearchArr.length - 1], EPage.Global.name()))
					{
						jdtParam.sSearch = jdtParam.sSearchArr[0];
						serialKeySelectQuery = getSerialKeyUsersListQuery(jdtParam).toString();
					}
					else if (CommonValidator.isEqual(jdtParam.sSearchArr[jdtParam.sSearchArr.length - 1], EPage.Advance.name()))
					{
						serialKeySelectQuery = getSerialKeyUsersAdvancedSearchListQuery(jdtParam).toString();
					}
				}
				else
				{
					serialKeySelectQuery = getSerialKeyUsersListQuery(jdtParam).toString();
				}
				if (CommonValidator.isNotNullNotEmpty(jdtParam.iDisplayLength) && CommonValidator.isNotNullNotEmpty(jdtParam.iDisplayStart) && jdtParam.iDisplayLength != 0)
					return session.createQuery(serialKeySelectQuery).setFirstResult(jdtParam.iDisplayStart).setMaxResults(jdtParam.iDisplayLength).list();
				else
					return session.createQuery(serialKeySelectQuery).list();
			}
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, " DAOImpl : getSerialKeyUsersList", excep.getMessage(), this.getClass().getName(), null);
		}
		finally
		{
			session.clear();
			session.close();
		}
		return new ArrayList<SerialKeyUserMapping>(0);
	}

	@SuppressWarnings("unchecked")
	
	public List<SerialKeyUserMapping> getSerialKeyUsersList(SerialKeyParam skParam)
	{
		Session session = getSession();
		try
		{
			StringBuffer sbSelectQry = new StringBuffer();
			sbSelectQry.append("From SerialKeyUserMapping SKU " + WHERE_1_1);
			if (CommonValidator.isNotNullNotEmpty(skParam))
			{
				if (CommonValidator.isNotNullNotEmpty(skParam.usEmployeeIdList))
				{
					sbSelectQry.append(" AND SKU.users.usStatus = True ");

					if (skParam.usEmployeeIdList.indexOf(COMMA_SPACE.trim()) > 0)
					{
						String[] employeeArr = skParam.usEmployeeIdList.split(COMMA_SPACE.trim());
						sbSelectQry.append(" AND SKU.users.usEmployeeId In " + EWrap.Brace.enclose(EWrap.Quote.enclose(employeeArr)));
					}
					else
						sbSelectQry.append(" AND SKU.users.usEmployeeId Like " + EWrap.Quote.enclose(skParam.usEmployeeIdList));
				}
				if (CommonValidator.isNotNullNotEmpty(skParam.serialKeyStatus))
				{
					sbSelectQry.append(" AND SKU.serialKeyGenerate.status = True ");
					sbSelectQry.append(" AND SKU.serialKeyGenerate.serialKeyStatus = " + EWrap.Quote.enclose(skParam.serialKeyStatus));
				}
			}
			return session.createQuery(sbSelectQry.toString()).list();
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, " DAOImpl : getSerialKeyUsersList", excep.getMessage(), this.getClass().getName(), null);
		}
		finally
		{
			session.clear();
			session.close();
		}
		return new ArrayList<SerialKeyUserMapping>(0);
	}

	@SuppressWarnings("unchecked")
	
	public List<SerialKeyUserMapping> getSerialKeyUsersListAll(JQueryDataTableParam jdtParam)
	{
		Session session = getSession();
		try
		{
			String serialKeySelectQuery = "";
			if (CommonValidator.isNotNullNotEmpty(jdtParam))
			{

				if (CommonValidator.isNotNullNotEmpty(jdtParam.sSearchArr) && jdtParam.sSearchArr.length != 0)
				{
					if (CommonValidator.isEqual(jdtParam.sSearchArr[jdtParam.sSearchArr.length - 1], EPage.Global.name()))
					{
						jdtParam.sSearch = jdtParam.sSearchArr[0];
						serialKeySelectQuery = getSerialKeyUsersListQuery(jdtParam).toString();
					}
					else if (CommonValidator.isEqual(jdtParam.sSearchArr[jdtParam.sSearchArr.length - 1], EPage.Advance.name()))
					{
						serialKeySelectQuery = getSerialKeyUsersAdvancedSearchListQuery(jdtParam).toString();
					}
				}
				else
				{
					serialKeySelectQuery = getSerialKeyUsersListQuery(jdtParam).toString();
				}
				return session.createQuery(serialKeySelectQuery).list();
			}
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, " DAOImpl : getSerialKeyUsersList", excep.getMessage(), this.getClass().getName(), null);
		}
		finally
		{
			session.clear();
			session.close();
		}
		return new ArrayList<SerialKeyUserMapping>(0);
	}

	public StringBuffer getSerialKeyUsersListQuery(JQueryDataTableParam jdtParam)
	{
		StringBuffer sbSelectQry = null;
		try
		{
			sbSelectQry = new StringBuffer();
			sbSelectQry.append("From SerialKeyUserMapping SKU " + WHERE_1_1);
			sbSelectQry.append(" AND SKU.users.usStatus = True ");
			if (CommonValidator.isNotNullNotEmpty(jdtParam.sSearch))
			{
				sbSelectQry.append(" AND SKU.users.usUserName Like " + EWrap.QuotePercent.enclose(jdtParam.sSearch));
				sbSelectQry.append(" OR SKU.serialKeyGenerate.serialKey Like " + EWrap.QuotePercent.enclose(jdtParam.sSearch));
				sbSelectQry.append(" OR SKU.serialKeyGenerate.serialBatch Like " + EWrap.QuotePercentRT.enclose(jdtParam.sSearch));
				sbSelectQry.append(" OR SKU.serialKeyGenerate.serialPromo Like " + EWrap.QuotePercent.enclose(jdtParam.sSearch));
				sbSelectQry.append(" OR SKU.serialKeyGenerate.serialNo Like " + EWrap.QuotePercent.enclose(jdtParam.sSearch));
				sbSelectQry.append(" OR SKU.serialKeyGenerate.amount Like " + EWrap.QuotePercent.enclose(jdtParam.sSearch));
				sbSelectQry.append(" OR SKU.serialKeyGenerate.serialKeyStatus Like " + EWrap.QuotePercent.enclose(jdtParam.sSearch));
			}

			sbSelectQry.append(" Order By SKU.serialKeyGenerate.createdDate " + jdtParam.sSortDirection);
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, " DAOImpl : getSerialKeyUsersListQuery", excep.getMessage(), this.getClass().getName(), null);
		}

		return sbSelectQry;
	}

	public StringBuffer getSerialKeyUsersAdvancedSearchListQuery(JQueryDataTableParam jdtParam)
	{
		StringBuffer sbSelectQry = null;
		try
		{
			sbSelectQry = new StringBuffer();
			sbSelectQry.append("From SerialKeyUserMapping SKU " + WHERE_1_1);
			sbSelectQry.append(" AND SKU.users.usStatus = True ");

			if (CommonValidator.isNotNullNotEmpty(jdtParam.columnFilterMap))
			{
				for (String key : jdtParam.columnFilterMap.keySet())
				{
					String columnValue = jdtParam.columnFilterMap.get(key);
					if (CommonValidator.isNotNullNotEmpty(columnValue) && key.contains("keyWord") == false)
					{
						sbSelectQry.append(" AND " + key + EWrap.QuotePercent.enclose(columnValue));
					}
				}
			}
			sbSelectQry.append(" Order By SKU.serialKeyGenerate.createdDate " + jdtParam.sSortDirection);
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, " DAOImpl : getSerialKeyUsersAdvancedSearchListQuery", excep.getMessage(), this.getClass().getName(), null);
		}

		return sbSelectQry;
	}

	@SuppressWarnings("unchecked")
	
	public List<IUsers> getUserbySerialKey(SerialKeyParam skParam)
	{
		Session session = getSession();
		try
		{
			if (CommonValidator.isNotNullNotEmpty(skParam))
			{
				StringBuffer sbSelectQry = new StringBuffer(FROM + UsersFactory.getInstance().getUsersInstanceName() + WHERE_1_1);
				sbSelectQry.append(" AND usStatus = True AND usSerialKey = " + EWrap.Quote.enclose(skParam.serialKey[0]));

				return session.createQuery(sbSelectQry.toString()).list();
			}
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, "updateSerialKeyStatus", excep.getMessage(), this.getClass().getName(), null);
		}
		finally
		{
			session.clear();
			session.close();
		}
		return new ArrayList<IUsers>(0);
	}

	@SuppressWarnings("unchecked")
	
	public List<SerialKeyGenerate> getValidatedSerialKeyList(SerialKeyParam skParam)
	{
		Session session = getSession();
		try
		{
			StringBuffer sbSelectQry = new StringBuffer();
			sbSelectQry.append(FROM + SerialKeyGenerate.class.getCanonicalName() + WHERE_1_1);
			sbSelectQry.append(" AND status = True ");
			if (CommonValidator.isNotNullNotEmpty(skParam))
			{
				if (CommonValidator.isNotNullNotEmpty(skParam.serialNo))
				{
					sbSelectQry.append(" AND serialNo In " + EWrap.Brace.enclose(EWrap.Quote.enclose(skParam.serialNo)));
				}
				if (CommonValidator.isNotNullNotEmpty(skParam.serialKey))
				{
					sbSelectQry.append(" AND serialKey In " + EWrap.Brace.enclose(EWrap.Quote.enclose(skParam.serialKey)));
				}
				sbSelectQry.append(" AND serialKeyStatus = " + EWrap.Quote.enclose(EKeyGen.Validated.getStatus()));
			}
			return session.createQuery(sbSelectQry.toString()).list();
		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, " DAOImpl : getValidatedSerialKeyList", excep.getMessage(), this.getClass().getName(), null);
		}
		finally
		{
			session.clear();
			session.close();
		}
		return new ArrayList<SerialKeyGenerate>(0);
	}

	
	public boolean updateSerialKeyStatus(SerialKeyParam skParam)
	{
		Transaction _Txn = null;
		Session session = null;
		try
		{
			session = getSession();
			_Txn = session.beginTransaction();
			session.saveOrUpdate(skParam.serialKeyGenerate);
			_Txn.commit();
			return true;

		}
		catch (Exception excep)
		{
			caLogger.error(Audit_Logging_Event_DAOImpl, "updateSerialKeyStatus", excep.getMessage(), this.getClass().getName(), null);
			if (_Txn != null && _Txn.isActive())
			{
				try
				{
					_Txn.rollback();
				}
				catch (HibernateException hibExcep)
				{
					caLogger.error(Audit_Logging_Event_DAOImpl, "updateSerialKeyStatus", hibExcep.getMessage(), this.getClass().getName(), null);
				}
			}
		}
		finally
		{
			if (session != null)
			{
				session.clear();
				session.close();
			}
		}
		return false;
	}

}
