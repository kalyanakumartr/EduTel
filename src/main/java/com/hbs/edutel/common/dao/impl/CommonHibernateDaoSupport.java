package com.hbs.edutel.common.dao.impl;

import javax.servlet.http.HttpServletRequest;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.metadata.ClassMetadata;
import org.hibernate.persister.entity.AbstractEntityPersister;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.hbs.edutel.admin.action.PasswordEncrypt;
import com.hbs.edutel.common.action.CommonValidator;
import com.hbs.edutel.common.exception.CustomException;
import com.hbs.edutel.logger.CustomAuditLogger;
import com.hbs.edutel.model.AutoGeneratedId;
import com.hbs.edutel.util.common.ConstEnumUtil.EPage;
import com.hbs.edutel.util.common.ConstEnumUtil.EWrap;
import com.hbs.edutel.util.common.consts.ConstInterface;
import com.hbs.edutel.util.common.property.factory.PropFactory;

public class CommonHibernateDaoSupport extends HibernateDaoSupport implements ConstInterface
{
	private static final long		serialVersionUID	= -2515673438608913557L;
	private final CustomAuditLogger	caLoggerCommon		= new CustomAuditLogger(this.getClass());
	protected PropFactory			propFactory;

	public String _getAutoGeneratedId(AutoGeneratedId autoGen)
	{
		Transaction _Txn = null;
		Session session = getSession();
		try
		{
			String idValue = Integer.parseInt(autoGen.getIdValue()) + 1 + "";

			if (autoGen.getIdValue().length() > idValue.length())
			{
				for (int i = 0; i <= (autoGen.getIdValue().length() - idValue.length()); i++)
				{
					idValue = "0" + idValue;
				}
			}
			autoGen.setIdValue(idValue);

			_Txn = session.beginTransaction();
			session.saveOrUpdate(autoGen);
			_Txn.commit();

			StringBuffer sbId = new StringBuffer();
			sbId.append(CommonValidator.isNotNullNotEmpty(autoGen.getIdFormat()) ? autoGen.getIdFormat() : "");
			//sbId.append(CommonUtil.getDateInFormat(new Date(), "yy"));
			sbId.append(idValue);

			return sbId.toString();
		}
		catch (Exception excep)
		{
			caLoggerCommon.error(Audit_Logging_Event_DAOImpl, "_getAutoGeneratedId", excep.getMessage(), this.getClass().getName(), null);
			if (_Txn != null && _Txn.isActive())
			{
				try
				{
					_Txn.rollback();
				}
				catch (HibernateException hibExcep)
				{
					caLoggerCommon.error(Audit_Logging_Event_DAOImpl, "_getAutoGeneratedId", hibExcep.getMessage(), this.getClass().getName(), null);
				}
			}
		}
		finally
		{
			if (session != null)
			{
				session.clear();
				session.close();
			}
		}
		return null;
	}

	public String createInList(Object object)
	{
		if (CommonValidator.isNotNullNotEmpty(object))
		{
			StringBuffer sbList = new StringBuffer();

			if (object instanceof Object[])
			{
				for (Object datum : (Object[]) object)
				{
					if (datum != null && datum.toString().indexOf("'") < 0)
						sbList.append(EWrap.Quote.enclose(String.valueOf(datum).trim()) + COMMA_SPACE);
					else
						return String.valueOf(object);
				}
				return sbList.substring(0, sbList.lastIndexOf(COMMA_SPACE));
			}
			else
			{
				String objects = (String) object;
				if (objects != null && objects.indexOf("'") > -1)
					return String.valueOf(object);
				else if (objects != null && objects.indexOf(COMMA_SPACE.trim()) > 0)
					return createInList(objects.split(COMMA_SPACE.trim()));
				else
					return EWrap.Quote.enclose(objects);
			}
		}
		return String.valueOf(object);
	}

	public String getAutoGeneratedId(EPage ePage, HttpServletRequest request)
	{
		String autoGenId = null;
		Session session = getSession();
		try
		{
			StringBuffer sbSelectQry = new StringBuffer(FROM + AutoGeneratedId.class.getName() + WHERE_1_1);
			sbSelectQry.append(" AND idKey = " + EWrap.Quote.enclose(ePage.name()));

			synchronized ( sbSelectQry )
			{
				AutoGeneratedId autoGen = (AutoGeneratedId) session.createQuery(sbSelectQry.toString()).list().iterator().next();

				if (CommonValidator.isNotNullNotEmpty(autoGen))
				{
					int lastAutoID = Integer.parseInt(autoGen.getIdValue());
					String[] project_authentication = null;
					if (CommonValidator.isEqual(EPage.Student.name(), String.valueOf(ePage)))
					{
						project_authentication = PasswordEncrypt.decrypt(project_authentication_student, "UTF-8").trim().split(HASH);
					}
					else if (CommonValidator.isEqual(EPage.Employee.name(), String.valueOf(ePage)))
					{
						project_authentication = PasswordEncrypt.decrypt(project_authentication_employee, "UTF-8").trim().split(HASH);
					}
					else if (CommonValidator.isEqual(EPage.Franchisee.name(), String.valueOf(ePage)))
					{
						project_authentication = PasswordEncrypt.decrypt(project_authentication_franchisee, "UTF-8").trim().split(HASH);
					}
					if (CommonValidator.isEqual(EPage.SerialNo.name(), String.valueOf(ePage)))
					{
						return _getAutoGeneratedId(autoGen);
					}
					else if (CommonValidator.isNotNullNotEmpty(project_authentication) && lastAutoID <= Integer.parseInt(project_authentication[1].trim())
							&& CommonValidator.isEqual(Project_Name.toLowerCase().trim(), project_authentication[0].toLowerCase().trim()))
					{
						return _getAutoGeneratedId(autoGen);
					}
					else
					{
						return null;
					}
				}
			}
		}
		catch (Exception excep)
		{
			caLoggerCommon.error(Audit_Logging_Event_DAOImpl, "getAutoGeneratedId", excep.getMessage(), this.getClass().getName(), null);
		}
		finally
		{
			if (session != null)
			{
				session.clear();
				session.close();
			}
		}
		return autoGenId;
	}

	public PropFactory getPropFactory()
	{
		return propFactory;
	}

	public String getTableNameForEntity(Class<?> entityClassName) throws CustomException
	{
		ClassMetadata hibernateMetadata = getSessionFactory().getClassMetadata(entityClassName);
		if (hibernateMetadata != null && hibernateMetadata instanceof AbstractEntityPersister)
		{
			AbstractEntityPersister persister = (AbstractEntityPersister) hibernateMetadata;
			return persister.getTableName();
		}
		throw new CustomException("No Table Mapped for the Entity Class : " + entityClassName);
	}

	public void setPropFactory(PropFactory propFactory)
	{
		this.propFactory = propFactory;
	}
}
